% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r_gsl_odeiv2.R
\name{r_gsl_odeiv2_outer_state_only}
\alias{r_gsl_odeiv2_outer_state_only}
\title{Initial Value Problem solution in C, no functions}
\usage{
r_gsl_odeiv2_outer_state_only(
  name,
  experiments,
  p,
  abs.tol = 1e-06,
  rel.tol = 1e-05,
  initial.step.size = 0.001,
  method = 0
)
}
\arguments{
\item{experiments}{a list of N simulation experiments (time, parameters, initial value, events)}

\item{p}{a matrix of parameters with M columns}

\item{abs.tol}{absolute tolerance (one real number, defaults to 1e-6)}

\item{rel.tol}{relative tolerance (one real number, defaults to 1e-5)}

\item{initial.step.size}{initial value for the step size; the step size will adapt to a value that observes the tolerances; defaults to 1e-3}

\item{model_name}{the name of the ODE model to simulate (a shared library of the same name will be dynamically loaded and needs to be created first)}
}
\value{
the solution trajectories y(t;p) for all experiments, as well as the output functions (if MODEL_func() is present in the .so file)
}
\description{
This is a wrapper. It uses the .Call function to call the C
function r_gsl_odeiv2_outer(). The C program solves a set of ODE
intial value problems and returns the trajectory y(t;p) for every
real valued parameter vector p. We use the solvers from the GNU
Scientific Library module odeiv2. This is similar to
\code{r_gsl_odeiv2_outer} but does not return (or evaluate) the system's
output function (model_func()).
}
\examples{
y0 <- c(0,1)
t <- seq(0,1,length.out=100)
u <- c(0,0)
e <- list(time=t,input=u,initial_value=y0)
y <- r_gsl_odeiv2_outer("HarmonicOscillator",t,y0,p=matrix(seq(0,1,length.out=3),ncol=3))
}
\keyword{ODE}
